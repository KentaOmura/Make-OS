     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード
     5 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     6 00000000                                 [INSTRSET "i486p"]				; 32ビットレジスタを認識してもらう必要がある。
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_out8, _io_in8
    11 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    12 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    13 00000000                                 		GLOBAL	_asm_inthandler21,_asm_inthandler2c,_asm_inthandler27
    14 00000000                                 		EXTERN	_inthandler21, _inthandler2c, _inthandler27
    15 00000000                                 
    16                                          [SECTION .text]
    17 00000000                                 
    18 00000000                                 _io_hlt:	; void io_hlt(void);
    19 00000000 F4                              		HLT
    20 00000001 C3                              		RET
    21 00000002                                 
    22 00000002                                 _io_cli:
    23 00000002 FA                              		CLI
    24 00000003 C3                              		RET
    25 00000004                                 
    26 00000004                                 _io_sti:
    27 00000004 FB                              		STI
    28 00000005 C3                              		RET
    29 00000006                                 
    30 00000006                                 _io_stihlt:
    31 00000006 FB                              		STI
    32 00000007 F4                              		HLT
    33 00000008 C3                              		RET
    34 00000009                                 
    35 00000009                                 _io_in8:	; int io_in8(int port);
    36 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    37 0000000D B8 00000000                     		MOV		EAX,0
    38 00000012 EC                              		IN		AL,DX
    39 00000013 C3                              		RET
    40 00000014                                 
    41 00000014                                 _io_out8:
    42 00000014 8B 54 24 04                     		MOV		EDX, [ESP+4]
    43 00000018 8A 44 24 08                     		MOV		AL, [ESP+8] ;8bit用だからALを使用している
    44 0000001C EE                              		OUT		DX, AL
    45 0000001D C3                              		RET
    46 0000001E                                 		
    47 0000001E                                 _io_load_eflags:
    48 0000001E 9C                              		PUSHFD
    49 0000001F 58                              		POP		EAX
    50 00000020 C3                              		RET
    51 00000021                                 		
    52 00000021                                 _io_store_eflags:
    53 00000021 8B 44 24 04                     		MOV		EAX, [ESP+4]
    54 00000025 50                              		PUSH	EAX
    55 00000026 9D                              		POPFD
    56 00000027 C3                              		RET
    57 00000028                                 
    58 00000028                                 _load_gdtr:
    59 00000028 66 8B 44 24 04                  		MOV		AX, [ESP+4] ; limitは16bitで表現できる
    60 0000002D 66 89 44 24 06                  		MOV		[ESP+6], AX ; addressは32bitでESP+8から格納されている。CPUがリトルエンディアンなのでこれで良い。
    61 00000032 0F 01 54 24 06                  		LGDT	[ESP+6]
    62 00000037 C3                              		RET
    63 00000038                                 
    64 00000038                                 _load_idtr: ;GDTと同じ
    65 00000038 66 8B 44 24 04                  		MOV		AX, [ESP+4]
    66 0000003D 66 89 44 24 06                  		MOV		[ESP+6], AX
    67 00000042 0F 01 5C 24 06                  		LIDT	[ESP+6]
    68 00000047 C3                              		RET
    69 00000048                                 
    70 00000048                                 _asm_inthandler21:
    71 00000048 06                              		PUSH	ES
    72 00000049 1E                              		PUSH	DS
    73 0000004A 60                              		PUSHAD
    74 0000004B 89 E0                           		MOV		EAX, ESP
    75 0000004D 50                              		PUSH	EAX
    76 0000004E 66 8C D0                        		MOV		AX, SS ; C言語の関数をコールする時は、SSレジスタに格納されている値にDSとESを合わせておく必要がある。
    77 00000051 8E D8                           		MOV		DS, AX
    78 00000053 8E C0                           		MOV		ES, AX
    79 00000055 E8 [00000000]                   		CALL	_inthandler21
    80 0000005A 58                              		POP		EAX
    81 0000005B 61                              		POPAD	
    82 0000005C 1F                              		POP		DS
    83 0000005D 07                              		POP		ES
    84 0000005E CF                              		IRETD
    85 0000005F                                 		
    86 0000005F                                 _asm_inthandler2c:
    87 0000005F 06                              		PUSH	ES
    88 00000060 1E                              		PUSH	DS
    89 00000061 60                              		PUSHAD
    90 00000062 89 E0                           		MOV		EAX, ESP
    91 00000064 50                              		PUSH	EAX
    92 00000065 66 8C D0                        		MOV		AX, SS ; C言語の関数をコールする時は、SSレジスタに格納されている値にDSとESを合わせておく必要がある。
    93 00000068 8E D8                           		MOV		DS, AX
    94 0000006A 8E C0                           		MOV		ES, AX
    95 0000006C E8 [00000000]                   		CALL	_inthandler2c
    96 00000071 58                              		POP		EAX
    97 00000072 61                              		POPAD	
    98 00000073 1F                              		POP		DS
    99 00000074 07                              		POP		ES
   100 00000075 CF                              		IRETD
   101 00000076                                 		
   102 00000076                                 _asm_inthandler27:
   103 00000076 06                              		PUSH	ES
   104 00000077 1E                              		PUSH	DS
   105 00000078 60                              		PUSHAD
   106 00000079 89 E0                           		MOV		EAX, ESP
   107 0000007B 50                              		PUSH	EAX
   108 0000007C 66 8C D0                        		MOV		AX, SS ; C言語の関数をコールする時は、SSレジスタに格納されている値にDSとESを合わせておく必要がある。
   109 0000007F 8E D8                           		MOV		DS, AX
   110 00000081 8E C0                           		MOV		ES, AX
   111 00000083 E8 [00000000]                   		CALL	_inthandler27
   112 00000088 58                              		POP		EAX
   113 00000089 61                              		POPAD	
   114 0000008A 1F                              		POP		DS
   115 0000008B 07                              		POP		ES
   116 0000008C CF                              		IRETD