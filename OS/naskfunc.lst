     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード
     5 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     6 00000000                                 [INSTRSET "i486p"]				; 32ビットレジスタを認識してもらう必要がある。
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_out8, _io_in8
    11 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    12 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    13 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    14 00000000                                 		GLOBAL	_memtest_sub
    15 00000000                                 		GLOBAL	_asm_inthandler21,_asm_inthandler2c,_asm_inthandler27,_asm_inthandler20
    16 00000000                                 		GLOBAL	_load_tr, _farjmp, _farcall
    17 00000000                                 		GLOBAL	_asm_cons_putchar
    18 00000000                                 		EXTERN	_inthandler21, _inthandler2c, _inthandler27,_inthandler20
    19 00000000                                 		EXTERN	_cons_putchar
    20 00000000                                 
    21                                          [SECTION .text]
    22 00000000                                 _load_tr:	; void load_tr(int tr)
    23 00000000 0F 00 5C 24 04                  		LTR		[ESP+4]		;tr
    24 00000005 C3                              		RET
    25 00000006                                 
    26 00000006                                 _farjmp:		;void farjmp(int eip, int cs)
    27 00000006 FF 6C 24 04                     		JMP		FAR	[ESP+4] ;eip, cs
    28 0000000A C3                              		RET
    29 0000000B                                 
    30 0000000B                                 _farcall:		;void farcall(int eip, int cs)
    31 0000000B FF 5C 24 04                     		CALL	FAR	[ESP+4] ;eip, cs
    32 0000000F C3                              		RET
    33 00000010                                 
    34 00000010                                 _io_hlt:	; void io_hlt(void);
    35 00000010 F4                              		HLT
    36 00000011 C3                              		RET
    37 00000012                                 
    38 00000012                                 _io_cli:
    39 00000012 FA                              		CLI
    40 00000013 C3                              		RET
    41 00000014                                 
    42 00000014                                 _io_sti:
    43 00000014 FB                              		STI
    44 00000015 C3                              		RET
    45 00000016                                 
    46 00000016                                 _io_stihlt:
    47 00000016 FB                              		STI
    48 00000017 F4                              		HLT
    49 00000018 C3                              		RET
    50 00000019                                 
    51 00000019                                 _io_in8:	; int io_in8(int port);
    52 00000019 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 0000001D B8 00000000                     		MOV		EAX,0
    54 00000022 EC                              		IN		AL,DX
    55 00000023 C3                              		RET
    56 00000024                                 
    57 00000024                                 _io_out8:
    58 00000024 8B 54 24 04                     		MOV		EDX, [ESP+4]
    59 00000028 8A 44 24 08                     		MOV		AL, [ESP+8] ;8bit用だからALを使用している
    60 0000002C EE                              		OUT		DX, AL
    61 0000002D C3                              		RET
    62 0000002E                                 		
    63 0000002E                                 _io_load_eflags:
    64 0000002E 9C                              		PUSHFD
    65 0000002F 58                              		POP		EAX
    66 00000030 C3                              		RET
    67 00000031                                 		
    68 00000031                                 _io_store_eflags:
    69 00000031 8B 44 24 04                     		MOV		EAX, [ESP+4]
    70 00000035 50                              		PUSH	EAX
    71 00000036 9D                              		POPFD
    72 00000037 C3                              		RET
    73 00000038                                 
    74 00000038                                 _load_cr0: ; int load_cr0(void)
    75 00000038 0F 20 C0                        		MOV		EAX, CR0
    76 0000003B C3                              		RET
    77 0000003C                                 
    78 0000003C                                 _store_cr0: ;void store_cr0(int cr0)
    79 0000003C 8B 44 24 04                     		MOV		EAX, [ESP+4]
    80 00000040 0F 22 C0                        		MOV		CR0, EAX
    81 00000043 C3                              		RET
    82 00000044                                 
    83 00000044                                 _load_gdtr:
    84 00000044 66 8B 44 24 04                  		MOV		AX, [ESP+4] ; limitは16bitで表現できる
    85 00000049 66 89 44 24 06                  		MOV		[ESP+6], AX ; addressは32bitでESP+8から格納されている。CPUがリトルエンディアンなのでこれで良い。
    86 0000004E 0F 01 54 24 06                  		LGDT	[ESP+6]
    87 00000053 C3                              		RET
    88 00000054                                 
    89 00000054                                 _load_idtr: ;GDTと同じ
    90 00000054 66 8B 44 24 04                  		MOV		AX, [ESP+4]
    91 00000059 66 89 44 24 06                  		MOV		[ESP+6], AX
    92 0000005E 0F 01 5C 24 06                  		LIDT	[ESP+6]
    93 00000063 C3                              		RET
    94 00000064                                 
    95 00000064                                 _memtest_sub: ; unsigned int memtest_sub(unsigned int start, unsigned int end)
    96 00000064 57                              		PUSH	EDI
    97 00000065 56                              		PUSH	ESI
    98 00000066 53                              		PUSH	EBX
    99 00000067 BE AA55AA55                     		MOV		ESI, 0xaa55aa55 ;pat0 = 0xaa55aa55
   100 0000006C BF 55AA55AA                     		MOV		EDI, 0x55aa55aa ;pat1 = 0x55aa55aa
   101 00000071 8B 44 24 10                     		MOV		EAX, [ESP+12+4] ;i = start PUSHを3回実施しているので、スタックポインタは4 * 3の12バイト進んでいる
   102 00000075                                 
   103 00000075                                 mts_loop:
   104 00000075 89 C3                           		MOV		EBX, EAX
   105 00000077 81 C3 00000FFC                  		ADD		EBX, 0xffc  ; p = i + 0xffc
   106 0000007D 8B 13                           		MOV		EDX, [EBX]  ; old = *p
   107 0000007F 89 33                           		MOV		[EBX], ESI  ; *p = pat0
   108 00000081 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff ;*p ^= 0xffffffff
   109 00000084 3B 3B                           		CMP		EDI, [EBX]	;if(*p != pat1) goto fin
   110 00000086 75 18                           		JNE		mts_fin
   111 00000088 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff ;*p ^= 0xffffffff
   112 0000008B 3B 33                           		CMP		ESI, [EBX]  ;if(*p != pat0) goto fin
   113 0000008D 75 11                           		JNE		mts_fin
   114 0000008F 89 13                           		MOV		[EBX], EDX	; *p = old
   115 00000091 05 00001000                     		ADD		EAX, 0x1000	;i += 0x1000
   116 00000096 3B 44 24 14                     		CMP		EAX, [ESP+12+8] ; if(i <= end) goto mts_loop
   117 0000009A 75 D9                           		JNE		mts_loop
   118 0000009C 5B                              		POP		EBX
   119 0000009D 5E                              		POP		ESI
   120 0000009E 5F                              		POP		EDI
   121 0000009F C3                              		RET
   122 000000A0                                 		
   123 000000A0                                 mts_fin:
   124 000000A0 89 13                           		MOV		[EBX], EDX ; *p = old
   125 000000A2 5B                              		POP		EBX
   126 000000A3 5E                              		POP		ESI
   127 000000A4 5F                              		POP		EDI
   128 000000A5 C3                              		RET
   129 000000A6                                 		
   130 000000A6                                 _asm_inthandler21:
   131 000000A6 06                              		PUSH	ES
   132 000000A7 1E                              		PUSH	DS
   133 000000A8 60                              		PUSHAD
   134 000000A9 89 E0                           		MOV		EAX, ESP
   135 000000AB 50                              		PUSH	EAX
   136 000000AC 66 8C D0                        		MOV		AX, SS ; C言語の関数をコールする時は、SSレジスタに格納されている値にDSとESを合わせておく必要がある。
   137 000000AF 8E D8                           		MOV		DS, AX
   138 000000B1 8E C0                           		MOV		ES, AX
   139 000000B3 E8 [00000000]                   		CALL	_inthandler21
   140 000000B8 58                              		POP		EAX
   141 000000B9 61                              		POPAD	
   142 000000BA 1F                              		POP		DS
   143 000000BB 07                              		POP		ES
   144 000000BC CF                              		IRETD
   145 000000BD                                 		
   146 000000BD                                 _asm_inthandler2c:
   147 000000BD 06                              		PUSH	ES
   148 000000BE 1E                              		PUSH	DS
   149 000000BF 60                              		PUSHAD
   150 000000C0 89 E0                           		MOV		EAX, ESP
   151 000000C2 50                              		PUSH	EAX
   152 000000C3 66 8C D0                        		MOV		AX, SS ; C言語の関数をコールする時は、SSレジスタに格納されている値にDSとESを合わせておく必要がある。
   153 000000C6 8E D8                           		MOV		DS, AX
   154 000000C8 8E C0                           		MOV		ES, AX
   155 000000CA E8 [00000000]                   		CALL	_inthandler2c
   156 000000CF 58                              		POP		EAX
   157 000000D0 61                              		POPAD	
   158 000000D1 1F                              		POP		DS
   159 000000D2 07                              		POP		ES
   160 000000D3 CF                              		IRETD
   161 000000D4                                 		
   162 000000D4                                 _asm_inthandler27:
   163 000000D4 06                              		PUSH	ES
   164 000000D5 1E                              		PUSH	DS
   165 000000D6 60                              		PUSHAD
   166 000000D7 89 E0                           		MOV		EAX, ESP
   167 000000D9 50                              		PUSH	EAX
   168 000000DA 66 8C D0                        		MOV		AX, SS ; C言語の関数をコールする時は、SSレジスタに格納されている値にDSとESを合わせておく必要がある。
   169 000000DD 8E D8                           		MOV		DS, AX
   170 000000DF 8E C0                           		MOV		ES, AX
   171 000000E1 E8 [00000000]                   		CALL	_inthandler27
   172 000000E6 58                              		POP		EAX
   173 000000E7 61                              		POPAD	
   174 000000E8 1F                              		POP		DS
   175 000000E9 07                              		POP		ES
   176 000000EA CF                              		IRETD
   177 000000EB                                 		
   178 000000EB                                 _asm_inthandler20:
   179 000000EB 06                              		PUSH	ES
   180 000000EC 1E                              		PUSH	DS
   181 000000ED 60                              		PUSHAD
   182 000000EE 89 E0                           		MOV		EAX, ESP
   183 000000F0 50                              		PUSH	EAX
   184 000000F1 66 8C D0                        		MOV		AX, SS ; C言語の関数をコールする時は、SSレジスタに格納されている値にDSとESを合わせておく必要がある。
   185 000000F4 8E D8                           		MOV		DS, AX
   186 000000F6 8E C0                           		MOV		ES, AX
   187 000000F8 E8 [00000000]                   		CALL	_inthandler20
   188 000000FD 58                              		POP		EAX
   189 000000FE 61                              		POPAD	
   190 000000FF 1F                              		POP		DS
   191 00000100 07                              		POP		ES
   192 00000101 CF                              		IRETD
   193 00000102                                 _asm_cons_putchar:
   194 00000102 FB                              		STI		;CPUは割り込み処理ルーチン扱いになるので、呼び出しと同時に自動でCLI命令が実行される。
   195 00000103 6A 01                           		PUSH	1  ; move
   196 00000105 25 000000FF                     		AND		EAX, 0xff
   197 0000010A 50                              		PUSH	EAX; chr
   198 0000010B FF 35 00000FEC                  		PUSH	DWORD [0x0fec] ;メモリの内容を読み込んでそのままPUSHする
   199 00000111 E8 [00000000]                   		CALL	_cons_putchar
   200 00000116 83 C4 0C                        		ADD		ESP, 12 ;スタックに積んだデータを捨てる
   201 00000119 CF                              		IRETD