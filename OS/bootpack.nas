[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_fifo32_init
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_boxfill8
	EXTERN	_task_alloc
	EXTERN	_consol_task
	EXTERN	_init_mouse_cursol
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_io_cli
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_io_sti
	EXTERN	_mouse_decode
	EXTERN	_asm_end_app
	EXTERN	_fifo32_put
	EXTERN	_task_sleep
	EXTERN	_change_wtitle8
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_init_pit
	EXTERN	_putstr8_asc
	EXTERN	_sheet_refresh
[FILE "bootpack.c"]
[SECTION .text]
	GLOBAL	_getMouseCoodinate
_getMouseCoodinate:
	PUSH	EBP
	MOV	EAX,20
	MOV	EBP,ESP
	MOV	EDX,20
	POP	EBP
	RET
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	0
	DB	0
	DB	113
	DB	119
	DB	101
	DB	114
	DB	116
	DB	121
	DB	117
	DB	105
	DB	111
	DB	112
	DB	64
	DB	91
	DB	0
	DB	0
	DB	97
	DB	115
	DB	100
	DB	102
	DB	103
	DB	104
	DB	106
	DB	107
	DB	108
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	122
	DB	120
	DB	99
	DB	118
	DB	98
	DB	110
	DB	109
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"consols",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	LEA	EBX,DWORD [-124+EBP]
	SUB	ESP,1500
	MOV	DWORD [-1468+EBP],0
	MOV	DWORD [-1484+EBP],-1
	MOV	DWORD [-1488+EBP],-1
	MOV	DWORD [-1492+EBP],0
	MOV	DWORD [-1496+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1500+EBP],EDX
	CALL	_hardWareInit
	PUSH	0
	LEA	EAX,DWORD [-1148+EBP]
	PUSH	EAX
	PUSH	256
	PUSH	EBX
	CALL	_fifo32_init
	PUSH	256
	PUSH	EBX
	CALL	_init_keyboard
	LEA	EAX,DWORD [-92+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enable_mouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	PUSH	3932160
	CALL	_memoryUsage
	MOV	DWORD [ESP],EAX
	PUSH	3932160
	CALL	_memoryInit
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	ADD	ESP,40
	PUSH	3932160
	MOV	DWORD [-1464+EBP],EAX
	CALL	_task_init
	PUSH	2
	PUSH	1
	PUSH	EAX
	MOV	DWORD [-1504+EBP],EAX
	MOV	DWORD [-100+EBP],EAX
	CALL	_task_run
	CALL	_getMouseCoodinate
	MOV	ECX,DWORD [-1464+EBP]
	MOV	DWORD [4068],ECX
	PUSH	ECX
	CALL	_sheet_alloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1472+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1472+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,48
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	3
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	CALL	_boxfill8
	ADD	ESP,28
	MOV	DWORD [-1480+EBP],1
L7:
	PUSH	DWORD [-1464+EBP]
	LEA	EBX,DWORD [-1436+EBP]
	CALL	_sheet_alloc
	PUSH	42240
	LEA	ESI,DWORD [-1444+EBP]
	PUSH	3932160
	MOV	DWORD [-1428+EBP+EDI*1],EAX
	CALL	_memman_alloc_4k
	MOV	DWORD [EBX+EDI*1],EAX
	PUSH	-1
	PUSH	165
	PUSH	256
	PUSH	EAX
	PUSH	DWORD [-1428+EBP+EDI*1]
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	0
	PUSH	LC0
	PUSH	165
	PUSH	256
	PUSH	DWORD [EBX+EDI*1]
	CALL	_makeWindow8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1428+EBP+EDI*1]
	CALL	_makeTextbox8
	ADD	ESP,44
	CALL	_task_alloc
	MOV	EBX,EAX
	MOV	DWORD [ESI+EDI*1],EAX
	PUSH	65536
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [-1428+EBP+EDI*1]
	ADD	EAX,65524
	MOV	DWORD [100+EBX],EAX
	MOV	EAX,DWORD [ESI+EDI*1]
	MOV	ECX,DWORD [100+EAX]
	MOV	DWORD [76+EAX],_consol_task
	MOV	DWORD [116+EAX],8
	MOV	DWORD [120+EAX],16
	MOV	DWORD [124+EAX],8
	MOV	DWORD [128+EAX],8
	MOV	DWORD [132+EAX],8
	MOV	DWORD [136+EAX],8
	MOV	DWORD [4+ECX],EDX
	MOV	ECX,DWORD [100+EAX]
	MOV	EDX,DWORD [3932160]
	MOV	DWORD [8+ECX],EDX
	PUSH	2
	PUSH	2
	PUSH	EAX
	CALL	_task_run
	MOV	EDX,DWORD [ESI+EDI*1]
	MOV	EAX,DWORD [-1428+EBP+EDI*1]
	OR	DWORD [28+EAX],32
	MOV	DWORD [36+EAX],EDX
	PUSH	512
	PUSH	3932160
	CALL	_memman_alloc_4k
	LEA	EDX,DWORD [-1452+EBP]
	MOV	DWORD [EDX+EDI*1],EAX
	PUSH	DWORD [ESI+EDI*1]
	PUSH	EAX
	PUSH	128
	MOV	EAX,DWORD [ESI+EDI*1]
	ADD	EDI,4
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_init
	ADD	ESP,44
	DEC	DWORD [-1480+EBP]
	JNS	L7
	PUSH	DWORD [-1464+EBP]
	MOV	DWORD [-1480+EBP],2
	LEA	EBX,DWORD [-1420+EBP]
	CALL	_sheet_alloc
	PUSH	3
	PUSH	8
	MOV	DWORD [-1476+EBP],EAX
	PUSH	8
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	PUSH	3
	PUSH	EBX
	CALL	_init_mouse_cursol
	ADD	ESP,32
	CALL	_timer_alloc
	MOV	EBX,EAX
	PUSH	1
	LEA	EAX,DWORD [-124+EBP]
	PUSH	EAX
	PUSH	EBX
	CALL	_timer_init
	PUSH	50
	PUSH	EBX
	CALL	_timer_settime
	MOVSX	EAX,WORD [4084]
	SUB	EAX,8
	CDQ
	IDIV	DWORD [-1480+EBP]
	MOV	DWORD [-1460+EBP],EAX
	MOVSX	EAX,WORD [4086]
	SUB	EAX,36
	PUSH	0
	CDQ
	IDIV	DWORD [-1480+EBP]
	PUSH	0
	MOV	DWORD [-1456+EBP],EAX
	PUSH	DWORD [-1472+EBP]
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	6
	PUSH	56
	PUSH	DWORD [-1424+EBP]
	CALL	_sheet_slide
	PUSH	2
	PUSH	8
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_slide
	PUSH	DWORD [-1456+EBP]
	PUSH	DWORD [-1460+EBP]
	PUSH	DWORD [-1476+EBP]
	CALL	_sheet_slide
	ADD	ESP,36
	PUSH	0
	PUSH	DWORD [-1472+EBP]
	CALL	_sheet_updown
	PUSH	1
	PUSH	DWORD [-1424+EBP]
	CALL	_sheet_updown
	PUSH	2
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_updown
	PUSH	3
	PUSH	DWORD [-1476+EBP]
	CALL	_sheet_updown
	ADD	ESP,32
	MOV	EDI,DWORD [-1428+EBP]
	PUSH	EDI
	CALL	_keywin_on
L60:
	POP	EAX
L55:
	LEA	EBX,DWORD [-124+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	ESI
	TEST	EAX,EAX
	JE	L64
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1480+EBP],EAX
	CALL	_io_sti
	POP	ECX
	CMP	DWORD [28+EDI],0
	JNE	L13
	MOV	EDX,DWORD [-1464+EBP]
	MOV	EAX,DWORD [16+EDX]
	MOV	EDI,DWORD [16+EDX+EAX*4]
L13:
	MOV	EAX,DWORD [-1480+EBP]
	SUB	EAX,256
	CMP	EAX,255
	JBE	L65
	MOV	EAX,DWORD [-1480+EBP]
	SUB	EAX,512
	CMP	EAX,255
	JA	L55
	MOVZX	EAX,BYTE [-1480+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-92+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	EDX
	POP	ECX
	DEC	EAX
	JNE	L55
	MOV	EAX,DWORD [-88+EBP]
	LEA	ECX,DWORD [-1460+EBP]
	ADD	DWORD [-1460+EBP],EAX
	MOV	EAX,DWORD [-84+EBP]
	ADD	DWORD [-1456+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	ECX
	CALL	_MouseCoodinateThreshold
	PUSH	DWORD [-1456+EBP]
	PUSH	DWORD [-1460+EBP]
	PUSH	DWORD [-1476+EBP]
	CALL	_sheet_slide
	ADD	ESP,24
	TEST	DWORD [-80+EBP],1
	JNE	L66
	MOV	DWORD [-1484+EBP],-1
	JMP	L55
L66:
	CMP	DWORD [-1484+EBP],0
	JS	L67
	MOV	EAX,DWORD [-1456+EBP]
	MOV	ECX,DWORD [-1468+EBP]
	MOV	EDX,DWORD [-1460+EBP]
	SUB	EAX,DWORD [-1488+EBP]
	SUB	EDX,DWORD [-1484+EBP]
	ADD	EAX,DWORD [16+ECX]
	MOV	ECX,DWORD [-1492+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [2+EDX+ECX*1]
	AND	EAX,-4
	PUSH	EAX
	PUSH	DWORD [-1468+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	MOV	EAX,DWORD [-1456+EBP]
	MOV	DWORD [-1488+EBP],EAX
	JMP	L55
L67:
	MOV	EAX,DWORD [-1464+EBP]
	MOV	EAX,DWORD [16+EAX]
	MOV	DWORD [-1508+EBP],EAX
	MOV	ECX,EAX
L63:
	DEC	ECX
	TEST	ECX,ECX
	JLE	L55
	MOV	EDX,DWORD [-1464+EBP]
	MOV	EAX,DWORD [-1460+EBP]
	MOV	EBX,DWORD [-1456+EBP]
	MOV	ESI,EAX
	MOV	EDX,DWORD [20+EDX+ECX*4]
	MOV	DWORD [-1468+EBP],EDX
	SUB	EBX,DWORD [16+EDX]
	SUB	ESI,DWORD [12+EDX]
	JS	L63
	MOV	EAX,DWORD [4+EDX]
	CMP	ESI,EAX
	JGE	L63
	TEST	EBX,EBX
	JS	L63
	CMP	EBX,DWORD [8+EDX]
	JGE	L63
	IMUL	EAX,EBX
	MOV	DWORD [-1512+EBP],EAX
	MOV	EDX,DWORD [EDX]
	MOV	EAX,DWORD [-1512+EBP]
	ADD	EAX,ESI
	MOVZX	EAX,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-1468+EBP]
	CMP	EAX,DWORD [20+EDX]
	JE	L63
	MOV	EAX,DWORD [-1508+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	EDX
	CALL	_sheet_updown
	CMP	DWORD [-1468+EBP],EDI
	POP	ECX
	POP	EAX
	JE	L48
	PUSH	EDI
	CALL	_keywin_off
	MOV	EDI,DWORD [-1468+EBP]
	PUSH	EDI
	CALL	_keywin_on
	POP	EAX
	POP	EDX
L48:
	CMP	ESI,2
	JLE	L49
	MOV	ECX,DWORD [-1468+EBP]
	MOV	EAX,DWORD [4+ECX]
	SUB	EAX,3
	CMP	ESI,EAX
	JGE	L49
	CMP	EBX,2
	JLE	L49
	CMP	EBX,20
	JG	L49
	MOV	EAX,DWORD [-1460+EBP]
	MOV	EDX,DWORD [-1456+EBP]
	MOV	ECX,DWORD [12+ECX]
	MOV	DWORD [-1484+EBP],EAX
	MOV	DWORD [-1488+EBP],EDX
	MOV	DWORD [-1492+EBP],ECX
L49:
	MOV	EAX,DWORD [-1468+EBP]
	MOV	EDX,DWORD [4+EAX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,ESI
	JG	L55
	LEA	EAX,DWORD [-5+EDX]
	CMP	ESI,EAX
	JGE	L55
	CMP	EBX,4
	JLE	L55
	CMP	EBX,18
	JG	L55
	MOV	EDX,DWORD [-1468+EBP]
	TEST	BYTE [28+EDX],16
	JE	L55
	MOV	EBX,DWORD [36+EDX]
L59:
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	JMP	L55
L65:
	CMP	DWORD [-1480+EBP],383
	JG	L15
	CMP	DWORD [-1496+EBP],0
	JNE	L16
	MOV	ECX,DWORD [-1480+EBP]
	MOV	AL,BYTE [_keytable0.0-256+ECX]
L61:
	MOV	BYTE [-76+EBP],AL
L18:
	MOV	AL,BYTE [-76+EBP]
	LEA	EDX,DWORD [-97+EAX]
	CMP	DL,25
	JBE	L20
	SUB	EAX,65
	CMP	AL,25
	JA	L19
L20:
	TEST	DWORD [-1500+EBP],4
	JE	L19
	CMP	DL,25
	JA	L22
	MOV	ECX,DWORD [-1480+EBP]
	MOV	AL,BYTE [_keytable1.1-256+ECX]
L62:
	MOV	BYTE [-76+EBP],AL
L19:
	MOV	AL,BYTE [-76+EBP]
	TEST	AL,AL
	JE	L24
	MOVZX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
L24:
	CMP	DWORD [-1480+EBP],343
	JE	L68
L25:
	CMP	DWORD [-1480+EBP],442
	JE	L69
L26:
	CMP	DWORD [-1480+EBP],270
	JE	L70
L27:
	CMP	DWORD [-1480+EBP],284
	JE	L71
L28:
	CMP	DWORD [-1480+EBP],271
	JE	L72
L29:
	CMP	DWORD [-1480+EBP],298
	JE	L73
L31:
	CMP	DWORD [-1480+EBP],310
	JE	L74
L32:
	CMP	DWORD [-1480+EBP],426
	JE	L75
L33:
	CMP	DWORD [-1480+EBP],438
	JE	L76
L34:
	CMP	DWORD [-1480+EBP],315
	JNE	L55
	CMP	DWORD [-1496+EBP],0
	JE	L55
	MOV	EBX,DWORD [36+EDI]
	TEST	EBX,EBX
	JE	L55
	CMP	DWORD [52+EBX],0
	JE	L55
	JMP	L59
L76:
	AND	DWORD [-1496+EBP],-3
	JMP	L34
L75:
	AND	DWORD [-1496+EBP],-2
	JMP	L33
L74:
	OR	DWORD [-1496+EBP],2
	JMP	L32
L73:
	OR	DWORD [-1496+EBP],1
	JMP	L31
L72:
	PUSH	EDI
	CALL	_keywin_off
	MOV	ECX,DWORD [24+EDI]
	DEC	ECX
	POP	ESI
	JNE	L30
	MOV	EAX,DWORD [-1464+EBP]
	MOV	ECX,DWORD [16+EAX]
	DEC	ECX
L30:
	MOV	EDX,DWORD [-1464+EBP]
	MOV	EDI,DWORD [20+EDX+ECX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	EBX
	JMP	L29
L71:
	PUSH	284
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L28
L70:
	PUSH	264
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L27
L69:
	XOR	DWORD [-1500+EBP],4
	JMP	L26
L68:
	MOV	ECX,DWORD [-1464+EBP]
	MOV	EAX,DWORD [16+ECX]
	CMP	EAX,2
	JLE	L25
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+ECX]
	CALL	_sheet_updown
	POP	ESI
	POP	EAX
	JMP	L25
L22:
	MOV	EDX,DWORD [-1480+EBP]
	MOV	AL,BYTE [_keytable0.0-256+EDX]
	JMP	L62
L16:
	MOV	EDX,DWORD [-1480+EBP]
	MOV	AL,BYTE [_keytable1.1-256+EDX]
	JMP	L61
L15:
	MOV	BYTE [-76+EBP],0
	JMP	L18
L64:
	PUSH	DWORD [-1504+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	JMP	L60
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	0
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	ECX
	POP	EAX
	JNE	L79
L77:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L79:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L77
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	ECX
	POP	EAX
	JNE	L82
L80:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L82:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L80
	GLOBAL	_memoryUsage
_memoryUsage:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	LEAVE
	RET
	GLOBAL	_memoryInit
_memoryInit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	MOV	EBX,DWORD [12+EBP]
	PUSH	ESI
	CALL	_memman_init
	MOV	DWORD [ESI],EBX
	PUSH	647168
	SUB	EBX,4194304
	PUSH	4096
	PUSH	ESI
	CALL	_memman_free
	PUSH	EBX
	PUSH	4194304
	PUSH	ESI
	CALL	_memman_free
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_hardWareInit
_hardWareInit:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	POP	EBP
	JMP	_init_pit
	GLOBAL	_MouseCoodinateThreshold
_MouseCoodinateThreshold:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	CMP	DWORD [EAX],0
	JS	L91
L87:
	CMP	DWORD [4+EAX],0
	JS	L92
L88:
	MOV	EDX,DWORD [12+EBP]
	DEC	EDX
	CMP	DWORD [EAX],EDX
	JBE	L89
	MOV	DWORD [EAX],EDX
L89:
	MOV	EDX,DWORD [16+EBP]
	DEC	EDX
	CMP	DWORD [4+EAX],EDX
	JBE	L86
	MOV	DWORD [4+EAX],EDX
L86:
	POP	EBP
	RET
L92:
	MOV	DWORD [4+EAX],0
	JMP	L88
L91:
	MOV	DWORD [EAX],0
	JMP	L87
	GLOBAL	_makeTextbox8
_makeTextbox8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EAX,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	ADD	EAX,DWORD [20+EBP]
	SUB	ESI,3
	PUSH	ESI
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-24+EBP],EAX
	MOV	EAX,DWORD [12+EBP]
	PUSH	ESI
	SUB	EAX,2
	PUSH	EAX
	MOV	DWORD [-28+EBP],EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SUB	EDI,3
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-32+EBP],EAX
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [-20+EBP]
	ADD	EBX,2
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	PUSH	EBX
	ADD	EAX,2
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [16+EBP]
	SUB	EBX,2
	MOV	EDI,DWORD [12+EBP]
	PUSH	EBX
	DEC	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EAX
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	PUSH	EDI
	MOVZX	EAX,BYTE [28+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_makeWindow8
_makeWindow8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,24
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [24+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [-1+EBX]
	PUSH	0
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	LEA	EAX,DWORD [-2+EBX]
	PUSH	1
	MOV	DWORD [-32+EBP],EAX
	PUSH	EAX
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	DEC	EAX
	MOV	DWORD [-36+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EDI,DWORD [-16+EBP]
	SUB	EDI,2
	PUSH	EDI
	PUSH	1
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	1
	PUSH	DWORD [-32+EBP]
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	EAX
	LEA	EAX,DWORD [-3+EBX]
	PUSH	EAX
	PUSH	2
	PUSH	2
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	EDI
	PUSH	1
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	DWORD [-36+EBP]
	PUSH	0
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	DWORD [8+EBP],ESI
	MOVSX	EAX,BYTE [-24+EBP]
	MOV	DWORD [20+EBP],EAX
	MOV	DWORD [12+EBP],EBX
	MOV	EAX,DWORD [-20+EBP]
	ADD	ESP,28
	MOV	DWORD [16+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_make_wtitle8
[SECTION .data]
_closebtn.2:
	DB	"OOOOOOOOOOOOOOO@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQQQ@@QQQQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"O$$$$$$$$$$$$$$@"
	DB	"@@@@@@@@@@@@@@@@"
[SECTION .text]
	GLOBAL	_make_wtitle8
_make_wtitle8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	CMP	BYTE [20+EBP],0
	JE	L96
	MOV	BL,7
	MOV	DL,11
L97:
	MOV	EAX,DWORD [12+EBP]
	PUSH	20
	SUB	EAX,4
	XOR	EDI,EDI
	PUSH	EAX
	XOR	ESI,ESI
	PUSH	3
	PUSH	3
	MOVZX	EAX,DL
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [16+EBP]
	MOVSX	EAX,BL
	PUSH	EAX
	PUSH	4
	PUSH	24
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putstr8_asc
	ADD	ESP,52
	IMUL	ECX,DWORD [12+EBP],5
L113:
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	ADD	EDX,ECX
	XOR	EBX,EBX
	LEA	EDX,DWORD [-21+EAX+EDX*1]
L112:
	MOV	AL,BYTE [_closebtn.2+EBX+ESI*1]
	CMP	AL,64
	JE	L110
	CMP	AL,36
	JE	L118
	CMP	AL,81
	JE	L119
L110:
	MOV	AL,7
L107:
	INC	EBX
	MOV	BYTE [EDX],AL
	INC	EDX
	CMP	EBX,15
	JLE	L112
	INC	EDI
	ADD	ESI,16
	ADD	ECX,DWORD [12+EBP]
	CMP	EDI,13
	JLE	L113
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L119:
	MOV	AL,1
	JMP	L107
L118:
	MOV	AL,15
	JMP	L107
L96:
	MOV	BL,8
	MOV	DL,15
	JMP	L97
	GLOBAL	_putfont8_sht
_putfont8_sht:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,16
	MOV	EAX,DWORD [12+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [16+EDI]
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	MOV	EBX,DWORD [32+EBP]
	LEA	EBX,DWORD [EAX+EBX*8]
	PUSH	EBX
	PUSH	EDI
	PUSH	EAX
	MOVZX	EAX,BYTE [24+EBP]
	PUSH	EAX
	PUSH	DWORD [4+ESI]
	PUSH	DWORD [ESI]
	CALL	_boxfill8
	PUSH	DWORD [-24+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [4+ESI]
	PUSH	DWORD [ESI]
	CALL	_putstr8_asc
	MOV	DWORD [8+EBP],ESI
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [20+EBP],EBX
	MOV	DWORD [24+EBP],EAX
	MOV	DWORD [16+EBP],EDI
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,52
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_sheet_refresh
