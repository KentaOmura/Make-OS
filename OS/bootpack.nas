[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_ini_keybuf
	EXTERN	_io_sti
	EXTERN	_io_out8
	EXTERN	_init_palette
	EXTERN	_boxfill8
	EXTERN	_init_mouse_cursol
	EXTERN	_putblock8_8
	EXTERN	_io_cli
	EXTERN	_keybord_data_num
	EXTERN	_mouse_data_num
	EXTERN	_get_mouse_data
	EXTERN	_sprintf
	EXTERN	_putstr8_asc
	EXTERN	_get_keybord_data
	EXTERN	_io_stihlt
	EXTERN	_io_in8
[FILE "bootpack.c"]
[SECTION .data]
LC1:
	DB	"%2d %2d %2d",0x00
LC0:
	DB	"%02X",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,2
	PUSH	EBX
	LEA	EBX,DWORD [-108+EBP]
	SUB	ESP,100
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_ini_keybuf
	CALL	_io_sti
	PUSH	249
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	CALL	_init_keyboard
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	3
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_boxfill8
	ADD	ESP,44
	PUSH	3
	PUSH	EBX
	CALL	_init_mouse_cursol
	MOV	EAX,DWORD [4084]
	CWD
	IDIV	SI
	MOVSX	EDI,AX
	MOV	AX,WORD [4086]
	PUSH	EBX
	CWD
	IDIV	SI
	MOVSX	ESI,AX
	PUSH	ESI
	PUSH	EDI
	PUSH	8
	PUSH	8
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putblock8_8
	LEA	EAX,DWORD [-28+EBP]
	ADD	ESP,36
	PUSH	EAX
	CALL	_enable_mouse
	POP	EBX
L15:
	CALL	_io_cli
	CALL	_keybord_data_num
	MOV	EBX,EAX
	CALL	_mouse_data_num
	LEA	EAX,DWORD [EAX+EBX*1]
	TEST	EAX,EAX
	JE	L16
	CALL	_keybord_data_num
	TEST	EAX,EAX
	JNE	L17
	CALL	_mouse_data_num
	TEST	EAX,EAX
	JE	L15
	CALL	_get_mouse_data
	MOV	BL,AL
	CALL	_io_sti
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EAX,DWORD [-28+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	EDX
	POP	ECX
	DEC	EAX
	JNE	L15
	LEA	EAX,DWORD [8+ESI]
	PUSH	EAX
	LEA	EAX,DWORD [8+EDI]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	3
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_boxfill8
	ADD	ESP,28
	MOV	EDX,DWORD [-24+EBP]
	MOV	ECX,DWORD [-20+EBP]
	ADD	ESI,ECX
	ADD	EDI,EDX
	JS	L18
L11:
	TEST	ESI,ESI
	JS	L19
L12:
	MOVSX	EAX,WORD [4084]
	SUB	EAX,8
	CMP	EDI,EAX
	JLE	L13
	MOV	EDI,EAX
L13:
	MOVSX	EAX,WORD [4086]
	SUB	EAX,8
	CMP	ESI,EAX
	JLE	L14
	MOV	ESI,EAX
L14:
	PUSH	ECX
	LEA	EBX,DWORD [-44+EBP]
	PUSH	EDX
	PUSH	DWORD [-16+EBP]
	PUSH	LC1
	PUSH	EBX
	CALL	_sprintf
	PUSH	47
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	PUSH	EAX
	PUSH	32
	PUSH	0
	PUSH	3
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_boxfill8
	ADD	ESP,48
	PUSH	EBX
	PUSH	7
	PUSH	32
	PUSH	0
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putstr8_asc
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	8
	PUSH	8
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putblock8_8
	ADD	ESP,52
	JMP	L15
L19:
	XOR	ESI,ESI
	JMP	L12
L18:
	XOR	EDI,EDI
	JMP	L11
L17:
	CALL	_get_keybord_data
	MOV	BL,AL
	CALL	_io_sti
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EBX,DWORD [-44+EBP]
	PUSH	LC0
	PUSH	EBX
	CALL	_sprintf
	PUSH	31
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	PUSH	EAX
	PUSH	16
	PUSH	0
	PUSH	3
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_boxfill8
	ADD	ESP,40
	PUSH	EBX
	PUSH	7
	PUSH	16
	PUSH	0
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putstr8_asc
	ADD	ESP,24
	JMP	L15
L16:
	CALL	_io_stihlt
	JMP	L15
	GLOBAL	_mouse_decode
_mouse_decode:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	MOV	EDX,DWORD [8+EBP]
	PUSH	EBX
	MOV	ECX,DWORD [12+EBP]
	MOVZX	EAX,BYTE [3+EDX]
	MOV	ESI,ECX
	CMP	EAX,1
	JE	L24
	CMP	EAX,1
	JLE	L32
	CMP	EAX,2
	JE	L25
	CMP	EAX,3
	JE	L26
L29:
	OR	EDI,-1
L21:
	POP	EBX
	MOV	EAX,EDI
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L26:
	MOV	BL,BYTE [EDX]
	AND	ESI,255
	MOV	EAX,EBX
	MOV	BYTE [2+EDX],CL
	AND	EAX,7
	MOV	EDI,1
	MOV	DWORD [12+EDX],EAX
	MOV	DWORD [8+EDX],ESI
	MOV	AL,BL
	MOVZX	ECX,BYTE [1+EDX]
	AND	EAX,16
	MOV	DWORD [4+EDX],ECX
	MOV	BYTE [3+EDX],1
	TEST	AL,AL
	JE	L27
	OR	ECX,-256
	MOV	DWORD [4+EDX],ECX
L27:
	AND	EBX,32
	TEST	BL,BL
	JE	L28
	OR	DWORD [8+EDX],-256
L28:
	NEG	DWORD [8+EDX]
	JMP	L21
L25:
	MOV	BYTE [1+EDX],CL
	MOV	BYTE [3+EDX],3
	JMP	L21
L32:
	TEST	EAX,EAX
	JNE	L29
	CMP	CL,-6
	JNE	L21
	MOV	BYTE [3+EDX],1
	JMP	L21
L24:
	MOV	BYTE [EDX],CL
	MOV	BYTE [3+EDX],2
	JMP	L21
	GLOBAL	_wait_KBC_sendready
_wait_KBC_sendready:
	PUSH	EBP
	MOV	EBP,ESP
L38:
	PUSH	100
	CALL	_io_in8
	POP	EDX
	AND	EAX,2
	JNE	L38
	LEAVE
	RET
	GLOBAL	_init_keyboard
_init_keyboard:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_wait_KBC_sendready
	PUSH	96
	PUSH	100
	CALL	_io_out8
	CALL	_wait_KBC_sendready
	PUSH	71
	PUSH	96
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_enable_mouse
_enable_mouse:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_wait_KBC_sendready
	PUSH	212
	PUSH	100
	CALL	_io_out8
	CALL	_wait_KBC_sendready
	PUSH	244
	PUSH	96
	CALL	_io_out8
	MOV	EAX,DWORD [8+EBP]
	MOV	BYTE [3+EAX],0
	LEAVE
	RET
