[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_fifo32_init
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_boxfill8
	EXTERN	_task_alloc
	EXTERN	_consol_task
	EXTERN	_init_mouse_cursol
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_io_cli
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_io_sti
	EXTERN	_sheet_refresh
	EXTERN	_mouse_decode
	EXTERN	_fifo32_put
	EXTERN	_task_sleep
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_init_pit
	EXTERN	_putstr8_asc
[FILE "bootpack.c"]
[SECTION .text]
	GLOBAL	_getMouseCoodinate
_getMouseCoodinate:
	PUSH	EBP
	MOV	EAX,20
	MOV	EBP,ESP
	MOV	EDX,20
	POP	EBP
	RET
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	0
	DB	0
	DB	113
	DB	119
	DB	101
	DB	114
	DB	116
	DB	121
	DB	117
	DB	105
	DB	111
	DB	112
	DB	64
	DB	91
	DB	0
	DB	0
	DB	97
	DB	115
	DB	100
	DB	102
	DB	103
	DB	104
	DB	106
	DB	107
	DB	108
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	122
	DB	120
	DB	99
	DB	118
	DB	98
	DB	110
	DB	109
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"consols",0x00
LC1:
	DB	"task_a",0x00
LC2:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,1688
	MOV	DWORD [-1672+EBP],0
	MOV	DWORD [-1676+EBP],0
	MOV	DWORD [-1680+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1684+EBP],EDX
	CALL	_hardWareInit
	PUSH	0
	LEA	EAX,DWORD [-1148+EBP]
	PUSH	EAX
	LEA	ECX,DWORD [-124+EBP]
	PUSH	256
	PUSH	ECX
	CALL	_fifo32_init
	LEA	EAX,DWORD [-124+EBP]
	PUSH	256
	PUSH	EAX
	CALL	_init_keyboard
	LEA	EDX,DWORD [-124+EBP]
	LEA	EAX,DWORD [-92+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EDX
	CALL	_enable_mouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	PUSH	3932160
	CALL	_memoryUsage
	MOV	DWORD [ESP],EAX
	PUSH	3932160
	CALL	_memoryInit
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	ADD	ESP,40
	MOV	ESI,EAX
	PUSH	3932160
	CALL	_task_init
	PUSH	2
	PUSH	1
	PUSH	EAX
	MOV	DWORD [-1688+EBP],EAX
	MOV	DWORD [-100+EBP],EAX
	CALL	_task_run
	CALL	_getMouseCoodinate
	PUSH	ESI
	CALL	_sheet_alloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1640+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1640+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,48
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	3
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	LEA	EBX,DWORD [-1404+EBP]
	CALL	_boxfill8
	PUSH	ESI
	CALL	_sheet_alloc
	ADD	ESP,32
	PUSH	42240
	MOV	DWORD [-1648+EBP],EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	165
	PUSH	256
	MOV	DWORD [-1656+EBP],EAX
	PUSH	EAX
	PUSH	DWORD [-1648+EBP]
	CALL	_sheet_setbuf
	PUSH	0
	PUSH	LC0
	PUSH	165
	PUSH	256
	PUSH	DWORD [-1656+EBP]
	CALL	_makeWindow8
	ADD	ESP,48
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1648+EBP]
	CALL	_makeTextbox8
	CALL	_task_alloc
	PUSH	65536
	PUSH	3932160
	MOV	DWORD [-1692+EBP],EAX
	CALL	_memman_alloc_4k
	ADD	EAX,65524
	MOV	ECX,DWORD [-1692+EBP]
	MOV	EDX,DWORD [-1648+EBP]
	ADD	ESP,32
	MOV	DWORD [100+ECX],EAX
	MOV	DWORD [76+ECX],_consol_task
	MOV	DWORD [116+ECX],8
	MOV	DWORD [120+ECX],16
	MOV	DWORD [124+ECX],8
	MOV	DWORD [128+ECX],8
	MOV	DWORD [132+ECX],8
	MOV	DWORD [136+ECX],8
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [100+ECX]
	MOV	EAX,DWORD [3932160]
	MOV	DWORD [8+EDX],EAX
	PUSH	2
	PUSH	2
	PUSH	ECX
	CALL	_task_run
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	10880
	PUSH	3932160
	MOV	EDI,EAX
	CALL	_memman_alloc_4k
	PUSH	88
	PUSH	68
	PUSH	160
	MOV	DWORD [-1652+EBP],EAX
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	1
	PUSH	LC1
	PUSH	68
	PUSH	160
	PUSH	DWORD [-1652+EBP]
	CALL	_makeWindow8
	PUSH	7
	PUSH	16
	PUSH	144
	PUSH	28
	PUSH	8
	PUSH	EDI
	CALL	_makeTextbox8
	ADD	ESP,44
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	3
	PUSH	8
	PUSH	8
	MOV	DWORD [-1644+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	PUSH	3
	PUSH	EBX
	MOV	EBX,2
	CALL	_init_mouse_cursol
	ADD	ESP,32
	MOV	DWORD [-1664+EBP],8
	MOV	DWORD [-1668+EBP],7
	CALL	_timer_alloc
	LEA	ECX,DWORD [-124+EBP]
	PUSH	1
	PUSH	ECX
	MOV	DWORD [-1660+EBP],EAX
	PUSH	EAX
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [-1660+EBP]
	CALL	_timer_settime
	MOVSX	EAX,WORD [4084]
	SUB	EAX,8
	CDQ
	IDIV	EBX
	MOV	DWORD [-1636+EBP],EAX
	MOVSX	EAX,WORD [4086]
	SUB	EAX,36
	PUSH	0
	CDQ
	IDIV	EBX
	PUSH	0
	MOV	DWORD [-1632+EBP],EAX
	PUSH	DWORD [-1640+EBP]
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	120
	PUSH	32
	PUSH	DWORD [-1648+EBP]
	CALL	_sheet_slide
	PUSH	DWORD [-1632+EBP]
	PUSH	DWORD [-1636+EBP]
	PUSH	DWORD [-1644+EBP]
	CALL	_sheet_slide
	PUSH	72
	PUSH	80
	PUSH	EDI
	CALL	_sheet_slide
	ADD	ESP,36
	PUSH	0
	PUSH	DWORD [-1640+EBP]
	CALL	_sheet_updown
	PUSH	1
	PUSH	DWORD [-1648+EBP]
	CALL	_sheet_updown
	PUSH	4
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	5
	PUSH	DWORD [-1644+EBP]
	CALL	_sheet_updown
	ADD	ESP,32
	MOV	DWORD [-1700+EBP],16
L46:
	LEA	ESI,DWORD [-124+EBP]
	CALL	_io_cli
	PUSH	ESI
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L49
	PUSH	ESI
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	ECX
	LEA	EAX,DWORD [-256+EBX]
	CMP	EAX,255
	JBE	L50
	LEA	EAX,DWORD [-512+EBX]
	CMP	EAX,255
	JBE	L51
	TEST	EBX,EBX
	JE	L41
	PUSH	0
	PUSH	ESI
	PUSH	DWORD [-1660+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1668+EBP],0
	JS	L43
	MOV	DWORD [-1668+EBP],0
L43:
	PUSH	50
	PUSH	DWORD [-1660+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	CMP	DWORD [-1668+EBP],0
	JS	L46
	PUSH	44
	PUSH	DWORD [-1700+EBP]
	PUSH	28
	PUSH	DWORD [-1664+EBP]
	MOVZX	EAX,BYTE [-1668+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	PUSH	44
	PUSH	DWORD [-1700+EBP]
	PUSH	28
	PUSH	DWORD [-1664+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,48
	JMP	L46
L41:
	PUSH	1
	PUSH	ESI
	PUSH	DWORD [-1660+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1668+EBP],0
	JS	L43
	MOV	DWORD [-1668+EBP],7
	JMP	L43
L51:
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EAX,DWORD [-92+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	ECX
	POP	EBX
	DEC	EAX
	JNE	L46
	MOV	EAX,DWORD [-88+EBP]
	LEA	ECX,DWORD [-1636+EBP]
	ADD	DWORD [-1636+EBP],EAX
	MOV	EAX,DWORD [-84+EBP]
	ADD	DWORD [-1632+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	ECX
	CALL	_MouseCoodinateThreshold
	PUSH	DWORD [-1632+EBP]
	PUSH	DWORD [-1636+EBP]
	PUSH	DWORD [-1644+EBP]
	CALL	_sheet_slide
	ADD	ESP,24
	TEST	DWORD [-80+EBP],1
	JE	L46
	MOV	EAX,DWORD [-1632+EBP]
	SUB	EAX,8
	PUSH	EAX
	MOV	EAX,DWORD [-1636+EBP]
	SUB	EAX,80
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_slide
	ADD	ESP,12
	JMP	L46
L50:
	CMP	EBX,383
	JG	L9
	CMP	DWORD [-1680+EBP],0
	JNE	L10
	MOV	AL,BYTE [_keytable0.0-256+EBX]
L47:
	MOV	BYTE [-76+EBP],AL
L12:
	MOV	AL,BYTE [-76+EBP]
	LEA	EDX,DWORD [-97+EAX]
	CMP	DL,25
	JBE	L14
	SUB	EAX,65
	CMP	AL,25
	JA	L13
L14:
	TEST	DWORD [-1684+EBP],4
	JE	L13
	CMP	DL,25
	JA	L16
	MOV	AL,BYTE [_keytable1.1-256+EBX]
L48:
	MOV	BYTE [-76+EBP],AL
L13:
	MOV	AL,BYTE [-76+EBP]
	TEST	AL,AL
	JE	L18
	CMP	DWORD [-1676+EBP],0
	JNE	L19
	CMP	DWORD [-1672+EBP],17
	JGE	L18
	PUSH	1
	LEA	EAX,DWORD [-76+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1664+EBP]
	PUSH	EDI
	MOV	BYTE [-75+EBP],0
	CALL	_putfont8_sht
	ADD	ESP,28
	ADD	DWORD [-1700+EBP],8
	ADD	DWORD [-1664+EBP],8
	INC	DWORD [-1672+EBP]
L18:
	CMP	EBX,442
	JE	L52
L22:
	CMP	EBX,270
	JE	L53
L23:
	CMP	EBX,284
	JE	L54
L26:
	CMP	EBX,271
	JE	L55
L28:
	CMP	EBX,298
	JE	L56
L31:
	CMP	EBX,310
	JE	L57
L32:
	CMP	EBX,426
	JE	L58
L33:
	CMP	EBX,438
	JE	L59
L34:
	CMP	DWORD [-1668+EBP],0
	JS	L35
	PUSH	44
	PUSH	DWORD [-1700+EBP]
	PUSH	28
	PUSH	DWORD [-1664+EBP]
	MOVZX	EAX,BYTE [-1668+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	ADD	ESP,28
L35:
	PUSH	44
	PUSH	DWORD [-1700+EBP]
	PUSH	28
	PUSH	DWORD [-1664+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L46
L59:
	AND	DWORD [-1680+EBP],-3
	JMP	L34
L58:
	AND	DWORD [-1680+EBP],-2
	JMP	L33
L57:
	OR	DWORD [-1680+EBP],2
	JMP	L32
L56:
	OR	DWORD [-1680+EBP],1
	JMP	L31
L55:
	CMP	DWORD [-1676+EBP],0
	JNE	L29
	PUSH	0
	PUSH	LC1
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1652+EBP]
	MOV	DWORD [-1676+EBP],1
	CALL	_make_wtitle8
	MOV	ECX,DWORD [-1648+EBP]
	PUSH	1
	PUSH	LC0
	PUSH	DWORD [4+ECX]
	PUSH	DWORD [-1656+EBP]
	CALL	_make_wtitle8
	ADD	ESP,32
	MOV	DWORD [-1668+EBP],-1
	PUSH	44
	PUSH	DWORD [-1700+EBP]
	PUSH	28
	PUSH	DWORD [-1664+EBP]
	PUSH	7
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1692+EBP]
	PUSH	2
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,36
L30:
	MOV	EDX,DWORD [-1648+EBP]
	PUSH	21
	PUSH	DWORD [4+EDX]
	PUSH	0
	PUSH	0
	PUSH	EDX
	CALL	_sheet_refresh
	PUSH	21
	PUSH	DWORD [4+EDI]
	PUSH	0
	PUSH	0
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,40
	JMP	L28
L29:
	PUSH	1
	PUSH	LC1
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1652+EBP]
	MOV	DWORD [-1676+EBP],0
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1648+EBP]
	PUSH	0
	PUSH	LC0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [-1656+EBP]
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1692+EBP]
	ADD	ESP,32
	ADD	EAX,16
	MOV	DWORD [-1668+EBP],0
	PUSH	3
	PUSH	EAX
	CALL	_fifo32_put
	POP	ESI
	POP	EAX
	JMP	L30
L54:
	CMP	DWORD [-1676+EBP],1
	JNE	L26
	MOV	EAX,DWORD [-1692+EBP]
	PUSH	284
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L26
L53:
	CMP	DWORD [-1676+EBP],0
	JNE	L24
	CMP	DWORD [-1664+EBP],8
	JLE	L24
	PUSH	1
	PUSH	LC2
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1664+EBP]
	PUSH	EDI
	CALL	_putfont8_sht
	ADD	ESP,28
	SUB	DWORD [-1700+EBP],8
	SUB	DWORD [-1664+EBP],8
	DEC	DWORD [-1672+EBP]
	JMP	L23
L24:
	MOV	EAX,DWORD [-1692+EBP]
	PUSH	264
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	ESI
	JMP	L23
L52:
	XOR	DWORD [-1684+EBP],4
	JMP	L22
L19:
	MOVZX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [-1692+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L18
L16:
	MOV	AL,BYTE [_keytable0.0-256+EBX]
	JMP	L48
L10:
	MOV	AL,BYTE [_keytable1.1-256+EBX]
	JMP	L47
L9:
	MOV	BYTE [-76+EBP],0
	JMP	L12
L49:
	PUSH	DWORD [-1688+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	EBX
	JMP	L46
	GLOBAL	_memoryUsage
_memoryUsage:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	LEAVE
	RET
	GLOBAL	_memoryInit
_memoryInit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	PUSH	EBX
	SUB	EBX,4194304
	PUSH	ESI
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	ESI
	CALL	_memman_free
	PUSH	EBX
	PUSH	4194304
	PUSH	ESI
	CALL	_memman_free
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_hardWareInit
_hardWareInit:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	POP	EBP
	JMP	_init_pit
	GLOBAL	_MouseCoodinateThreshold
_MouseCoodinateThreshold:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	CMP	DWORD [EAX],0
	JS	L68
L64:
	CMP	DWORD [4+EAX],0
	JS	L69
L65:
	MOV	EDX,DWORD [12+EBP]
	DEC	EDX
	CMP	DWORD [EAX],EDX
	JBE	L66
	MOV	DWORD [EAX],EDX
L66:
	MOV	EDX,DWORD [16+EBP]
	DEC	EDX
	CMP	DWORD [4+EAX],EDX
	JBE	L63
	MOV	DWORD [4+EAX],EDX
L63:
	POP	EBP
	RET
L69:
	MOV	DWORD [4+EAX],0
	JMP	L65
L68:
	MOV	DWORD [EAX],0
	JMP	L64
	GLOBAL	_makeTextbox8
_makeTextbox8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EAX,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	ADD	EAX,DWORD [20+EBP]
	SUB	ESI,3
	PUSH	ESI
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-24+EBP],EAX
	MOV	EAX,DWORD [12+EBP]
	PUSH	ESI
	SUB	EAX,2
	PUSH	EAX
	MOV	DWORD [-28+EBP],EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SUB	EDI,3
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-32+EBP],EAX
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [-20+EBP]
	ADD	EBX,2
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	PUSH	EBX
	ADD	EAX,2
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [16+EBP]
	SUB	EBX,2
	MOV	EDI,DWORD [12+EBP]
	PUSH	EBX
	DEC	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EAX
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	PUSH	EDI
	MOVZX	EAX,BYTE [28+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_makeWindow8
_makeWindow8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,24
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [24+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [-1+EBX]
	PUSH	0
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	LEA	EAX,DWORD [-2+EBX]
	PUSH	1
	MOV	DWORD [-32+EBP],EAX
	PUSH	EAX
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	DEC	EAX
	MOV	DWORD [-36+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EDI,DWORD [-16+EBP]
	SUB	EDI,2
	PUSH	EDI
	PUSH	1
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	1
	PUSH	DWORD [-32+EBP]
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	EAX
	LEA	EAX,DWORD [-3+EBX]
	PUSH	EAX
	PUSH	2
	PUSH	2
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	EDI
	PUSH	1
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	DWORD [-36+EBP]
	PUSH	0
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	DWORD [8+EBP],ESI
	MOVSX	EAX,BYTE [-24+EBP]
	MOV	DWORD [20+EBP],EAX
	MOV	DWORD [12+EBP],EBX
	MOV	EAX,DWORD [-20+EBP]
	ADD	ESP,28
	MOV	DWORD [16+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_make_wtitle8
[SECTION .data]
_closebtn.2:
	DB	"OOOOOOOOOOOOOOO@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQQQ@@QQQQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"O$$$$$$$$$$$$$$@"
	DB	"@@@@@@@@@@@@@@@@"
[SECTION .text]
	GLOBAL	_make_wtitle8
_make_wtitle8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	CMP	BYTE [20+EBP],0
	JE	L73
	MOV	BL,7
	MOV	DL,11
L74:
	MOV	EAX,DWORD [12+EBP]
	PUSH	20
	SUB	EAX,4
	XOR	EDI,EDI
	PUSH	EAX
	XOR	ESI,ESI
	PUSH	3
	PUSH	3
	MOVZX	EAX,DL
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [16+EBP]
	MOVSX	EAX,BL
	PUSH	EAX
	PUSH	4
	PUSH	24
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putstr8_asc
	ADD	ESP,52
	IMUL	ECX,DWORD [12+EBP],5
L90:
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	ADD	EDX,ECX
	XOR	EBX,EBX
	LEA	EDX,DWORD [-21+EAX+EDX*1]
L89:
	MOV	AL,BYTE [_closebtn.2+EBX+ESI*1]
	CMP	AL,64
	JE	L87
	CMP	AL,36
	JE	L95
	CMP	AL,81
	JE	L96
L87:
	MOV	AL,7
L84:
	INC	EBX
	MOV	BYTE [EDX],AL
	INC	EDX
	CMP	EBX,15
	JLE	L89
	INC	EDI
	ADD	ESI,16
	ADD	ECX,DWORD [12+EBP]
	CMP	EDI,13
	JLE	L90
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L96:
	MOV	AL,1
	JMP	L84
L95:
	MOV	AL,15
	JMP	L84
L73:
	MOV	BL,8
	MOV	DL,15
	JMP	L74
	GLOBAL	_putfont8_sht
_putfont8_sht:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,16
	MOV	EAX,DWORD [12+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [16+EDI]
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	MOV	EBX,DWORD [32+EBP]
	LEA	EBX,DWORD [EAX+EBX*8]
	PUSH	EBX
	PUSH	EDI
	PUSH	EAX
	MOVZX	EAX,BYTE [24+EBP]
	PUSH	EAX
	PUSH	DWORD [4+ESI]
	PUSH	DWORD [ESI]
	CALL	_boxfill8
	PUSH	DWORD [-24+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [4+ESI]
	PUSH	DWORD [ESI]
	CALL	_putstr8_asc
	MOV	DWORD [8+EBP],ESI
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [20+EBP],EBX
	MOV	DWORD [24+EBP],EAX
	MOV	DWORD [16+EBP],EDI
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,52
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_sheet_refresh
