     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_wait_KBC_sendready
     7 00000000                                 	EXTERN	_io_out8
     8 00000000                                 	EXTERN	_io_in8
     9 00000000                                 	EXTERN	_fifo32_put
    10 00000000                                 [FILE "mouse.c"]
    11                                          [SECTION .text]
    12 00000000                                 	GLOBAL	_enable_mouse
    13 00000000                                 _enable_mouse:
    14 00000000 55                              	PUSH	EBP
    15 00000001 89 E5                           	MOV	EBP,ESP
    16 00000003 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
    17 00000006 A3 [00000000]                   	MOV	DWORD [_mousefifo],EAX
    18 0000000B 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
    19 0000000E A3 [00000004]                   	MOV	DWORD [_mousedata0],EAX
    20 00000013 E8 [00000000]                   	CALL	_wait_KBC_sendready
    21 00000018 68 000000D4                     	PUSH	212
    22 0000001D 6A 64                           	PUSH	100
    23 0000001F E8 [00000000]                   	CALL	_io_out8
    24 00000024 E8 [00000000]                   	CALL	_wait_KBC_sendready
    25 00000029 68 000000F4                     	PUSH	244
    26 0000002E 6A 60                           	PUSH	96
    27 00000030 E8 [00000000]                   	CALL	_io_out8
    28 00000035 8B 45 10                        	MOV	EAX,DWORD [16+EBP]
    29 00000038 C6 40 03 00                     	MOV	BYTE [3+EAX],0
    30 0000003C C9                              	LEAVE
    31 0000003D C3                              	RET
    32 0000003E                                 	GLOBAL	_mouse_decode
    33 0000003E                                 _mouse_decode:
    34 0000003E 55                              	PUSH	EBP
    35 0000003F 89 E5                           	MOV	EBP,ESP
    36 00000041 57                              	PUSH	EDI
    37 00000042 56                              	PUSH	ESI
    38 00000043 31 FF                           	XOR	EDI,EDI
    39 00000045 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
    40 00000048 53                              	PUSH	EBX
    41 00000049 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
    42 0000004C 0F B6 42 03                     	MOVZX	EAX,BYTE [3+EDX]
    43 00000050 89 CE                           	MOV	ESI,ECX
    44 00000052 83 F8 01                        	CMP	EAX,1
    45 00000055 74 7C                           	JE	L6
    46 00000057 83 F8 01                        	CMP	EAX,1
    47 0000005A 7E 68                           	JLE	L14
    48 0000005C 83 F8 02                        	CMP	EAX,2
    49 0000005F 74 5A                           	JE	L7
    50 00000061 83 F8 03                        	CMP	EAX,3
    51 00000064 74 0A                           	JE	L8
    52 00000066                                 L11:
    53 00000066 83 CF FF                        	OR	EDI,-1
    54 00000069                                 L3:
    55 00000069 5B                              	POP	EBX
    56 0000006A 89 F8                           	MOV	EAX,EDI
    57 0000006C 5E                              	POP	ESI
    58 0000006D 5F                              	POP	EDI
    59 0000006E 5D                              	POP	EBP
    60 0000006F C3                              	RET
    61 00000070                                 L8:
    62 00000070 8A 1A                           	MOV	BL,BYTE [EDX]
    63 00000072 81 E6 000000FF                  	AND	ESI,255
    64 00000078 89 D8                           	MOV	EAX,EBX
    65 0000007A 88 4A 02                        	MOV	BYTE [2+EDX],CL
    66 0000007D 83 E0 07                        	AND	EAX,7
    67 00000080 BF 00000001                     	MOV	EDI,1
    68 00000085 89 42 0C                        	MOV	DWORD [12+EDX],EAX
    69 00000088 89 72 08                        	MOV	DWORD [8+EDX],ESI
    70 0000008B 88 D8                           	MOV	AL,BL
    71 0000008D 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
    72 00000091 83 E0 10                        	AND	EAX,16
    73 00000094 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    74 00000097 C6 42 03 01                     	MOV	BYTE [3+EDX],1
    75 0000009B 84 C0                           	TEST	AL,AL
    76 0000009D 74 09                           	JE	L9
    77 0000009F 81 C9 FFFFFF00                  	OR	ECX,-256
    78 000000A5 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    79 000000A8                                 L9:
    80 000000A8 83 E3 20                        	AND	EBX,32
    81 000000AB 84 DB                           	TEST	BL,BL
    82 000000AD 74 07                           	JE	L10
    83 000000AF 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
    84 000000B6                                 L10:
    85 000000B6 F7 5A 08                        	NEG	DWORD [8+EDX]
    86 000000B9 EB AE                           	JMP	L3
    87 000000BB                                 L7:
    88 000000BB 88 4A 01                        	MOV	BYTE [1+EDX],CL
    89 000000BE C6 42 03 03                     	MOV	BYTE [3+EDX],3
    90 000000C2 EB A5                           	JMP	L3
    91 000000C4                                 L14:
    92 000000C4 85 C0                           	TEST	EAX,EAX
    93 000000C6 75 9E                           	JNE	L11
    94 000000C8 80 F9 FA                        	CMP	CL,-6
    95 000000CB 75 9C                           	JNE	L3
    96 000000CD C6 42 03 01                     	MOV	BYTE [3+EDX],1
    97 000000D1 EB 96                           	JMP	L3
    98 000000D3                                 L6:
    99 000000D3 88 0A                           	MOV	BYTE [EDX],CL
   100 000000D5 C6 42 03 02                     	MOV	BYTE [3+EDX],2
   101 000000D9 EB 8E                           	JMP	L3
   102 000000DB                                 	GLOBAL	_inthandler2c
   103 000000DB                                 _inthandler2c:
   104 000000DB 55                              	PUSH	EBP
   105 000000DC 89 E5                           	MOV	EBP,ESP
   106 000000DE 6A 64                           	PUSH	100
   107 000000E0 68 000000A0                     	PUSH	160
   108 000000E5 E8 [00000000]                   	CALL	_io_out8
   109 000000EA 6A 62                           	PUSH	98
   110 000000EC 6A 20                           	PUSH	32
   111 000000EE E8 [00000000]                   	CALL	_io_out8
   112 000000F3 6A 60                           	PUSH	96
   113 000000F5 E8 [00000000]                   	CALL	_io_in8
   114 000000FA 0F B6 C0                        	MOVZX	EAX,AL
   115 000000FD 03 05 [00000004]                	ADD	EAX,DWORD [_mousedata0]
   116 00000103 50                              	PUSH	EAX
   117 00000104 FF 35 [00000000]                	PUSH	DWORD [_mousefifo]
   118 0000010A E8 [00000000]                   	CALL	_fifo32_put
   119 0000010F C9                              	LEAVE
   120 00000110 C3                              	RET
   121 00000111                                 	GLOBAL	_mousefifo
   122                                          [SECTION .data]
   123 00000000                                 	ALIGNB	4
   124 00000000                                 _mousefifo:
   125 00000000 00 00 00 00                     	RESB	4
   126 00000004                                 	GLOBAL	_mousedata0
   127                                          [SECTION .data]
   128 00000004                                 	ALIGNB	4
   129 00000004                                 _mousedata0:
   130 00000004 00 00 00 00                     	RESB	4
